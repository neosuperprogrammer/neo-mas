<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="command">
	<typeAlias alias="hashmap" type="java.util.HashMap"/>
	<!-- 권한 조회 -->
	<select id="getPermission" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			CASE WHEN USE_MAIL	> 0 THEN 'Y' ELSE 'N' END	USE_MAIL
		,	CASE WHEN USE_CAL	> 0 THEN 'Y' ELSE 'N' END	USE_CAL
		,	CASE WHEN USE_ADDR	> 0 THEN 'Y' ELSE 'N' END	USE_ADDR
		,	CASE WHEN USE_BOARD	> 0 THEN 'Y' ELSE 'N' END	USE_BOARD
		,	CASE WHEN USE_APPRV	> 0 THEN 'Y' ELSE 'N' END	USE_APPRV 
		FROM
			TAP.MTAP_USERCFG10 WITH (NOLOCK)
		WHERE
			ACCOUNT_ID = #ACCOUNT_ID#
	]]>
	</select>
	
	<!-- 오늘 일정 수-->
	<select id="getTodayScheduleCount" parameterClass="hashmap" resultClass="int">
	<![CDATA[
		DECLARE @ACCOUNT_ID		VARCHAR(100)
		DECLARE @TODAY 			VARCHAR(8)

		SET @ACCOUNT_ID = #ACCOUNT_ID#
		SET @TODAY = #REQ_DATE#

		SELECT
			COUNT(*) CNT
		FROM
			PMG.LETS_SCHEDULE S WITH (NOLOCK)
		WHERE
			(
				(S.OWN_USER_ID = @ACCOUNT_ID AND S.SHARE_USER_ID IS NULL)
			OR	SHARE_USER_ID = @ACCOUNT_ID
			)
		AND @TODAY BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE
	]]>
	</select>
	
	<!-- 타시스템 카운트 조회 ( 20140919 추가 (정도경영 카운트 취득위해) ) -->
	<select id="getCount" parameterClass="hashmap" resultClass="int">
	<![CDATA[
		SELECT
			COUNT
		FROM
			TAP.MTAP_COUNT WITH (NOLOCK)
		WHERE
			ID = #ID#
	]]>
	</select>
	
	<!-- 오늘 신규 게시물 수 -->
	<select id="getTodayNewBoardItemCount" parameterClass="hashmap" resultClass="int">
	<![CDATA[
		SELECT
			COUNT(*) NT
		FROM
			TAP.BD_BOARD_ITEM I WITH (NOLOCK)
		WHERE
			I.BOARD_ID = #BOARD_ID#
		AND I.STATUS = 'A'
		AND	DATEDIFF(dd, I.REGIST_DATE, GETDATE()) = 0
	]]>
	</select>

	<!-- 서비스 데스크 조회 -->
	<select id="getServiceDesk" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			TELEPHONE
		,	EMAIL
		FROM
			PMG.MPMG_HELP_DESK WITH (NOLOCK)
		WHERE
			AFFILIATE_CODE = #GROUP_CODE#
	]]>
	</select>
	
	<!-- 사용자 설정 조회 -->
	<!-- 20140618 오프라인권한있으면 모두모두 ON, 20140618 개발반영 -->
	<select id="getUserConfiguration" parameterClass="hashmap" resultClass="hashmap"> 
 
		DECLARE @USE_OFLN		VARCHAR(1)  

		SELECT
			@USE_OFLN = USE_OFLN
		FROM
			tap.MTAP_USERCFG10 WITH (nolock) 
		WHERE
			ACCOUNT_ID = #ACCOUNT_ID#

		IF @USE_OFLN = '1'
			SELECT
				UC.SIGNATURE
			,	1 AS USE_PUSH
			,	'0000' AS PUSH_START_TIME
			,	'2400' AS PUSH_END_TIME
			,	1 AS USE_PUSH_0
			,	1 AS USE_PUSH_1
			,	1 AS USE_PUSH_2
			,	1 AS USE_PUSH_3
			,	1 AS USE_PUSH_4
			,	1 AS USE_PUSH_5
			,	1 AS USE_PUSH_6
			,	UC.TOKEN_TYPE
			,	UC.DEVICE_TOKEN
			,	D.WIFI
			FROM
				PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
			JOIN
				PMS.MPMS_USER_DEVICE10 D WITH (NOLOCK)
				ON U.USERIDNFR = D.USERIDNFR
			JOIN
				PMG.MPMG_USERCONFIG UC WITH (NOLOCK)
				ON
					U.USERIDNFR = UC.USERIDNFR
				AND	D.USERDEVCEIDNFR = UC.USERDEVCEIDNFR
			WHERE
				U.SAWONNO		= #ACCOUNT_ID#
				<isNotNull prepend="AND " property="WIFI">D.WIFI = #WIFI#</isNotNull>
			AND	U.REGISTUSDSTCD = '10'
			AND D.REGISTUSDSTCD = '10'
		ELSE
			SELECT
				UC.SIGNATURE
			,	UC.USE_PUSH
			,	UC.PUSH_START_TIME
			,	UC.PUSH_END_TIME
			,	UC.USE_PUSH_0
			,	UC.USE_PUSH_1
			,	UC.USE_PUSH_2
			,	UC.USE_PUSH_3
			,	UC.USE_PUSH_4
			,	UC.USE_PUSH_5
			,	UC.USE_PUSH_6
			,	UC.TOKEN_TYPE
			,	UC.DEVICE_TOKEN
			,	D.WIFI
			FROM
				PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
			JOIN
				PMS.MPMS_USER_DEVICE10 D WITH (NOLOCK)
				ON U.USERIDNFR = D.USERIDNFR
			JOIN
				PMG.MPMG_USERCONFIG UC WITH (NOLOCK)
				ON
					U.USERIDNFR = UC.USERIDNFR
				AND	D.USERDEVCEIDNFR = UC.USERDEVCEIDNFR
			WHERE
				U.SAWONNO		= #ACCOUNT_ID#
				<isNotNull prepend="AND " property="WIFI">D.WIFI = #WIFI#</isNotNull>
			AND	U.REGISTUSDSTCD = '10'
			AND D.REGISTUSDSTCD = '10'
 
	</select>
	<select id="getUserConfigurationBK20140618" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			UC.SIGNATURE
		,	UC.USE_PUSH
		,	UC.PUSH_START_TIME
		,	UC.PUSH_END_TIME
		,	UC.USE_PUSH_0
		,	UC.USE_PUSH_1
		,	UC.USE_PUSH_2
		,	UC.USE_PUSH_3
		,	UC.USE_PUSH_4
		,	UC.USE_PUSH_5
		,	UC.USE_PUSH_6
		,	UC.TOKEN_TYPE
		,	UC.DEVICE_TOKEN
		,	D.WIFI
		FROM
			PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_DEVICE10 D WITH (NOLOCK)
			ON U.USERIDNFR = D.USERIDNFR
		JOIN
			PMG.MPMG_USERCONFIG UC WITH (NOLOCK)
			ON
				U.USERIDNFR = UC.USERIDNFR
			AND	D.USERDEVCEIDNFR = UC.USERDEVCEIDNFR
		WHERE
			U.SAWONNO		= #ACCOUNT_ID#
			<isNotNull prepend="AND " property="WIFI">D.WIFI = #WIFI#</isNotNull>
		AND	U.REGISTUSDSTCD = '10'
		AND D.REGISTUSDSTCD = '10'
	]]>
	</select>
	
	<!-- 사용자 설정 업데이트 -->
	<update id="updateUserConfiguration" parameterClass="hashmap">
		UPDATE PMG.MPMG_USERCONFIG
		SET
		<isNotNull property="SIGNATURE" >SIGNATURE = #SIGNATURE#</isNotNull>
		<isNull property="SIGNATURE">SIGNATURE = SIGNATURE</isNull>
		<isNotNull prepend="," property="USE_PUSH">USE_PUSH = #USE_PUSH#</isNotNull>
		<isNotNull prepend="," property="PUSH_START_TIME">PUSH_START_TIME = #PUSH_START_TIME#</isNotNull>
		<isNotNull prepend="," property="PUSH_END_TIME">PUSH_END_TIME = #PUSH_END_TIME#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_0">USE_PUSH_0 = #USE_PUSH_0#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_1">USE_PUSH_1 = #USE_PUSH_1#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_2">USE_PUSH_2 = #USE_PUSH_2#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_3">USE_PUSH_3 = #USE_PUSH_3#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_4">USE_PUSH_4 = #USE_PUSH_4#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_5">USE_PUSH_5 = #USE_PUSH_5#</isNotNull>
		<isNotNull prepend="," property="USE_PUSH_6">USE_PUSH_6 = #USE_PUSH_6#</isNotNull>
		<isNotNull prepend="," property="TOKEN_TYPE">TOKEN_TYPE = #TOKEN_TYPE#</isNotNull>
		<isNotNull prepend="," property="DEVICE_TOKEN">DEVICE_TOKEN = #DEVICE_TOKEN#</isNotNull>
		FROM
			PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_DEVICE10 D WITH (NOLOCK)
			ON
				U.USERIDNFR = D.USERIDNFR
		JOIN
			PMG.MPMG_USERCONFIG UC WITH (NOLOCK)
			ON
				U.USERIDNFR = UC.USERIDNFR
			AND	D.USERDEVCEIDNFR = UC.USERDEVCEIDNFR
		WHERE
			U.SAWONNO		= #ACCOUNT_ID#
		AND	D.WIFI			= #WIFI#
		AND	U.REGISTUSDSTCD = '10'
		AND D.REGISTUSDSTCD = '10'
	</update>
	
	<!-- 사용자 설정 추가 -->
	<insert id="insertUserConfiguration" parameterClass="hashmap">
	<![CDATA[
		INSERT INTO PMG.MPMG_USERCONFIG
		(
			USERIDNFR
		,	USERDEVCEIDNFR
		,	SIGNATURE
		,	USE_PUSH
		,	PUSH_START_TIME
		,	PUSH_END_TIME
		,	USE_PUSH_0
		,	USE_PUSH_1
		,	USE_PUSH_2
		,	USE_PUSH_3
		,	USE_PUSH_4
		,	USE_PUSH_5
		,	USE_PUSH_6
		,	DEVICE_TOKEN
		,	TOKEN_TYPE
		)
		SELECT
			U.USERIDNFR
		,	D.USERDEVCEIDNFR
		,	#SIGNATURE#
		,	#USE_PUSH#
		,	#PUSH_START_TIME#
		,	#PUSH_END_TIME#
		,	#USE_PUSH_0#
		,	#USE_PUSH_1#
		,	#USE_PUSH_2#
		,	#USE_PUSH_3#
		,	#USE_PUSH_4#
		,	#USE_PUSH_5#
		,	#USE_PUSH_6#
		,	#DEVICE_TOKEN#
		,	#TOKEN_TYPE#
		FROM
			PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_DEVICE10 D WITH (NOLOCK)
			ON
				U.USERIDNFR	= D.USERIDNFR
		WHERE
			U.SAWONNO		= #ACCOUNT_ID#
		AND	D.WIFI			= #WIFI#
		AND	U.REGISTUSDSTCD = '10'
		AND D.REGISTUSDSTCD = '10'
	]]>
	</insert>
	
	<!-- 주소 목록 조회 -->
	<select id="getAddressList" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @GROUP_ID	VARCHAR(100)
		DECLARE @GROUP_CODE VARCHAR(100)
		DECLARE @LOCALE		VARCHAR(100)
		DECLARE @ACCOUNT_ID VARCHAR(100)
		
		SET @GROUP_ID	= #GROUP_ID#
		SET @GROUP_CODE = #GROUP_CODE#
		SET @LOCALE		= #LOCALE#
		SET @ACCOUNT_ID = #ACCOUNT_ID#
		
		IF @GROUP_ID = 'ROOT'
			SELECT
				''				COMPANY_NAME
			,	''				SAWONNO
			,	CDNAME			NAME
			,	''				POS_NAME
			,	0				POSITIONCD
			,	CDNAME			DEPT_NAME
			,	CD				MEMBER_CODE
			,	0				ADDRESS_ID
			,	''				TELEPHONE
			,	''				MOBILE
			,	''				EMAIL
			,	'1'				ADDRESSTYPE
			,	'0'				IS_TBT_INSTALLED
			,	'0'				IS_FAVORITE
			FROM
				PMS.MPMS_COM_CODE20 WITH (NOLOCK)
			WHERE
				CDGROUP = 'GRP001'
			AND	REGISTUSDSTCD = '10'
			AND	locale = @LOCALE
		ELSE
		BEGIN
			SELECT
				COMPANY_NAME
			,	SAWONNO
			,	NAME
			,	POS_NAME
			,	DEPT_NAME
			,	MEMBER_CODE
			,	ADDRESS_ID
			,	TELEPHONE
			,	MOBILE
			,	EMAIL
			,	ADDRESSTYPE
			,	POSITIONCD
			,	IS_TBT_INSTALLED
			,	IS_FAVORITE
			FROM
				(
					SELECT 
						''				COMPANY_NAME
					,	''				SAWONNO
					,	NAME			NAME
					,	''				POS_NAME
					,	'0'				POSITIONCD
					,	NAME			DEPT_NAME
					,	GROUPCOCD		MEMBER_CODE
					,	GROUPIDNFR		ADDRESS_ID
					,	''				TELEPHONE
					,	''				MOBILE
					,	''				EMAIL
					,	'1'				ADDRESSTYPE
					,	DISPORDER
					,	'B'				IS_EXCLUSIVE
					,	'0'				IS_TBT_INSTALLED
					,	'0'				IS_FAVORITE
					FROM
						PMS.MPMS_USER_GROUP10 WITH (NOLOCK)
					WHERE
						REGISTUSDSTCD	= 10
					AND	UPPERGROUPIDNFR = @GROUP_ID
					AND	GROUPCOCD		= @GROUP_CODE
					UNION ALL
					SELECT	
						D.CDNAME					COMPANY_NAME
					,	A.SAWONNO
					,	A.NAME
					,	ISNULL(A.POSITION, '')		POS_NAME
					,	A.POSITIONCD
					,	C.NAME						DEPT_NAME
					,	A.GROUPCOCD					MEMBER_CODE
					,	A.USERIDNFR					ADDRESS_ID
					,	ISNULL(A.OFFICE_PHONE, '')	TELEPHONE
					,	ISNULL(A.MOBILE_PHONE, '')	MOBILE
					,	A.EMAIL
					,	'3'							ADDRESSTYPE
					,	NULL						DISPORDER
					,	CASE A1.FIELD12
							WHEN 'O' THEN 'A'
							WHEN 'T' THEN 'B'
							ELSE A1.FIELD12
						END	IS_EXCLUSIVE
					,	IIF(E.USERIDNFR IS NOT NULL, '1', '0') IS_TBT_INSTALLED
					,	IIF(F.OTHER_ACCOUNT_ID IS NOT NULL, '1', '0') IS_FAVORITE
					FROM
						PMS.MPMS_USER_INFO10 A WITH (NOLOCK)	
					JOIN
						PMS.MPMS_USER_INFO11 A1 WITH (NOLOCK)
						ON
							A.SAWONNO = A1.SAWONNO
						AND	A1.GROUPCOCD = @GROUP_CODE
					JOIN
						PMS.MPMS_USER_GROUP11 B WITH (NOLOCK)
						ON
							A.USERIDNFR = B.USERIDNFR
					JOIN
						PMS.MPMS_USER_GROUP10 C WITH (NOLOCK)
						ON
							B.GROUPIDNFR = C.GROUPIDNFR
					JOIN
						PMS.MPMS_COM_CODE20 D WITH (NOLOCK) 
						ON
							A.GROUPCOCD = d.CD
						AND	D.CDGROUP = 'GRP001' AND D.LOCALE = @LOCALE
					LEFT JOIN
						PBT.MPBT_APP_INSTALLATION_INFO E WITH (NOLOCK)
						ON
							E.USERIDNFR = A.USERIDNFR 
					LEFT JOIN
						PMG.MPMG_LETS_SCHEDULE_OTHER_USER F WITH (NOLOCK)
						ON
							F.ACCOUNT_ID = @ACCOUNT_ID
						AND F.OTHER_ACCOUNT_ID = A.USERIDNFR
					WHERE
						B.groupIdnfr = @GROUP_ID
					AND	A.REGISTUSDSTCD	= 10
					AND	(A.GROUPCOCD = 'LGDP' OR (A.GROUPCOCD = 'LGD' AND CHARINDEX('@lgdpartner.com', A.EMAIL) = 0))
					AND (A.GROUPCOCD = 'LGDP' OR (A.GROUPCOCD = 'LGD' AND A1.field14 != '02' AND A.legacyPK NOT LIKE 'T%'))
				) a
				ORDER BY
					IS_EXCLUSIVE ASC
				,	ADDRESSTYPE ASC
				,	DISPORDER ASC
				,	POSITIONCD ASC
				,	NAME ASC
		END
	]]>
	</select>

	<!-- 주소록 검색 목록 조회 -->
	<select id="getAddressSearchList" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @GROUP_CODE	VARCHAR(100)
		DECLARE @LOCALE		VARCHAR(100)
		DECLARE @KEYWORD	NVARCHAR(200)
		DECLARE @ACCOUNT_ID VARCHAR(100)
		
		SET @GROUP_CODE = #GROUP_CODE#
		SET @LOCALE		= #LOCALE#
		SET @KEYWORD	= #KEYWORD#
		SET @ACCOUNT_ID = #ACCOUNT_ID#
		
		SELECT DISTINCT
			A.USERIDNFR		ADDRESS_ID	
		,	D.CDNAME		COMPANY_NAME
		,	A.SAWONNO
		,	A.NAME
		,	A.POSITION		POS_NAME
		,	A.DEPTNAME			DEPT_NAME
		,	ISNULL(A.OFFICE_PHONE, '')	TELEPHONE
		,	ISNULL(A.MOBILE_PHONE, '')	MOBILE
		,	A.EMAIL
		,	A.GROUPCOCD		MEMBER_CODE
		,	A.POSITIONCD
		,	IIF(E.USERIDNFR IS NOT NULL, '1', '0') IS_TBT_INSTALLED
		,	IIF(F.OTHER_ACCOUNT_ID IS NOT NULL, '1', '0') IS_FAVORITE
		FROM
			PMS.MPMS_USER_INFO10	A WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_INFO11	A1 WITH (NOLOCK)
			ON
				A.SAWONNO = A1.SAWONNO
			AND A.GROUPCOCD = A1.GROUPCOCD
		JOIN
			PMS.MPMS_COM_CODE20 D WITH (NOLOCK)
			ON
				A.GROUPCOCD = d.CD
			AND	D.CDGROUP = 'GRP001'
			AND	D.LOCALE = @LOCALE
		LEFT JOIN
			PBT.MPBT_APP_INSTALLATION_INFO E WITH (NOLOCK)
			ON
				E.USERIDNFR = A.USERIDNFR
		LEFT JOIN
			PMG.MPMG_LETS_SCHEDULE_OTHER_USER F WITH (NOLOCK)
			ON
				F.ACCOUNT_ID = @ACCOUNT_ID
			AND F.OTHER_ACCOUNT_ID = A.USERIDNFR		
		WHERE
			A.REGISTUSDSTCD	= 10
		AND	(
					A.NAME LIKE '%' + @KEYWORD + '%'
				OR	A.EMAIL LIKE '%' + @KEYWORD + '%'
				OR	A.OFFICE_PHONE LIKE '%' + @KEYWORD + '%'
				OR	A1.FIELD20 LIKE '%' + REPLACE(@KEYWORD, '-', '') + '%'
				OR	A.DEPTNAME LIKE '%' + @KEYWORD + '%'
			)
		AND	(A.GROUPCOCD = 'LGDP' OR (A.GROUPCOCD = 'LGD' AND A1.field14 != '02' AND A.legacyPK NOT LIKE 'T%'))
		AND	A.legacyPK NOT LIKE 'T%'
		ORDER BY
			POSITIONCD ASC
		,	NAME ASC
	]]>
	</select>
	
	<!-- 주소록 상세 정보 조회 -->
	<select id="getAddress" parameterClass="hashmap" resultClass="hashmap">
		DECLARE @GROUP_CODE		VARCHAR(100)
		DECLARE @LOCALE			VARCHAR(100)
		DECLARE @ADDRESS_ID		NUMERIC(18)
		DECLARE @ACCOUNT_ID		VARCHAR(100)
		DECLARE @ACCOUNT_ID2	VARCHAR(100)
		
		SET @GROUP_CODE	= #GROUP_CODE#
		SET @LOCALE		= #LOCALE#
		SET @ADDRESS_ID	= #ADDRESS_ID#
		SET	@ACCOUNT_ID = #ACCOUNT_ID#
		SET @ACCOUNT_ID2 = #ACCOUNT_ID2#
		
		SELECT DISTINCT
			D.CDNAME						COMPANY_NAME
		,	A.SAWONNO
		,	A.NAME
		,	ISNULL(A.POSITION, '')			POS_NAME
		,	ISNULL(A.DEPTNAME, '')			DEPT_NAME
		,	ISNULL(A.OFFICE_PHONE, '')		TELEPHONE
		,	ISNULL(A.MOBILE_PHONE, '')		MOBILE
		,	ISNULL(A.EMAIL, '')				EMAIL
		,	A.GROUPCOCD						MEMBER_CODE
		,	A1.FIELD16						BLOG_PHOTO
		,	A1.FIELD13						EMPLOY_NO
		,	IIF(E.USERIDNFR IS NOT NULL, '1', '0') IS_TBT_INSTALLED
		,	IIF(F.OTHER_ACCOUNT_ID IS NOT NULL, '1', '0') IS_FAVORITE
		,   A.USERIDNFR						USER_ID
		FROM
			PMS.MPMS_USER_INFO10	A WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_INFO11	A1 WITH (NOLOCK)
			ON
				A.SAWONNO = A1.SAWONNO
			AND A.GROUPCOCD = A1.GROUPCOCD
		JOIN
			PMS.MPMS_COM_CODE20 D WITH (NOLOCK)
			ON
				A.GROUPCOCD = d.CD
			AND	D.CDGROUP = 'GRP001'
			AND	D.LOCALE = @LOCALE
		LEFT JOIN
			PBT.MPBT_APP_INSTALLATION_INFO E WITH (NOLOCK)
			ON
				E.USERIDNFR = A.USERIDNFR
		LEFT JOIN
			PMG.MPMG_LETS_SCHEDULE_OTHER_USER F WITH (NOLOCK)
			ON
				F.ACCOUNT_ID = @ACCOUNT_ID2
			AND F.OTHER_ACCOUNT_ID = A.USERIDNFR
		WHERE
			<isNotNull property="ADDRESS_ID">A.USERIDNFR = @ADDRESS_ID</isNotNull>
			<!-- 2013.10.10 도메인이 안붙어서 오는 경우가 있음 : <isNotNull property="ACCOUNT_ID">A.EMAIL = @ACCOUNT_ID</isNotNull> -->
			<isNotNull property="ACCOUNT_ID">(A.EMAIL = @ACCOUNT_ID OR A.EMAIL = @ACCOUNT_ID + CASE WHEN @GROUP_CODE = 'LGD' THEN '@lgdisplay.com' ELSE '@lgdpartner.com' END)</isNotNull>
		AND	A.REGISTUSDSTCD = '10'
	</select>
	
	<!-- 단순 일정 목록 조회 -->
	<select id="getSimpleSchedule" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			S.ITEM_ID
		,	S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
		FROM
			PMG.LETS_SCHEDULE S WITH (NOLOCK)
		WHERE
			S.OWN_USER_ID		= #ACCOUNT_ID#
		AND	S.SHARE_USER_ID		IS NULL
		AND S.ITEM_START_DATE	BETWEEN #START_DATE# AND #END_DATE#
		AND S.ITEM_END_DATE		BETWEEN #START_DATE# AND #END_DATE#
		UNION ALL
		SELECT
			S.ITEM_ID
		,	S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
		FROM
			PMG.LETS_SCHEDULE S WITH (NOLOCK)
		WHERE
			SHARE_USER_ID		= #ACCOUNT_ID#
		AND	(S.ITEM_START_DATE BETWEEN #START_DATE# AND #END_DATE# OR S.ITEM_END_DATE BETWEEN #START_DATE# AND #END_DATE#)
	]]>
	</select>
	
	<!-- 일정 목록 조회 -->
	<select id="getScheduleListByDay" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		SET @END_DATE	= #END_DATE#
		
		SELECT
			*
		FROM
			(
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.IS_REPEAT
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND	@START_DATE			BETWEEN S.ITEM_START_DATE AND  S.ITEM_END_DATE
				AND	@END_DATE			BETWEEN S.ITEM_START_DATE AND  S.ITEM_END_DATE
				UNION
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.IS_REPEAT
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND	@START_DATE			BETWEEN S.ITEM_START_DATE AND  S.ITEM_END_DATE
				AND	@END_DATE			BETWEEN S.ITEM_START_DATE AND  S.ITEM_END_DATE
			) S
		ORDER BY
			S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
	]]>
	</select>

	<select id="getScheduleList" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		SET @END_DATE	= #END_DATE#
		
		SELECT
			*
		FROM
			(
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.IS_REPEAT
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND ((S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE) OR (@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE))
				UNION
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.IS_REPEAT
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND ((S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE) OR (@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE))
			) S
		ORDER BY
			S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
	]]>
	</select>

	<!-- 오프라인 일정 조회 -->
	<select id="getOffLineScheduleList" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID					VARCHAR(100)
		DECLARE @START_DATE					VARCHAR(8)
		DECLARE @END_DATE					VARCHAR(8)
		DECLARE @APPLICATION_TRANSFER_DATE	DATETIME
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		SET @END_DATE	= #END_DATE#
		SET @APPLICATION_TRANSFER_DATE	= GETDATE()
		
		SELECT
			S.*
		,	M.ITEM_CONTENT
		FROM
			(
				SELECT
					*
				,	@APPLICATION_TRANSFER_DATE APPLICATION_TRANSFER_DATE
				FROM
					(
						SELECT
							S.SCHEDULE_SEQ
						,	S.ITEM_ID
						,	S.ITEM_TITLE
						,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
						,	S.ITEM_START_DATE
						,	S.ITEM_START_TIME
						,	S.ITEM_END_DATE
						,	S.ITEM_END_TIME
						,	S.IS_WHOLE_DAY
						,	S.IS_REPEAT
						,	S.OWN_USER_ID
						,	S.ITEM_CLOSE
						,	'' as Status
						,	U.NAME							USER_NAME
						,	''								DEPT_NAME
						,	U.EMAIL
						,	U.POSITION
						,	U.USERIDNFR						USER_ID
						FROM
							PMG.LETS_SCHEDULE S WITH (NOLOCK)
						JOIN
							PMS.MPMS_USER_INFO10	U WITH (NOLOCK) 
						ON
							U.SAWONNO = S.OWN_USER_ID
						WHERE
							S.OWN_USER_ID		= @ACCOUNT_ID
						AND	S.SHARE_USER_ID		IS NULL
						AND (
								(S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE)
								OR
								(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE)
							)
						UNION
						SELECT
							S.SCHEDULE_SEQ
						,	S.ITEM_ID
						,	S.ITEM_TITLE
						,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
						,	S.ITEM_START_DATE
						,	S.ITEM_START_TIME
						,	S.ITEM_END_DATE
						,	S.ITEM_END_TIME
						,	S.IS_WHOLE_DAY
						,	S.IS_REPEAT
						,	S.OWN_USER_ID
						,	S.ITEM_CLOSE
						,	'' as Status
						,	U.NAME							USER_NAME
						,	''								DEPT_NAME
						,	U.EMAIL
						,	U.POSITION
						,	U.USERIDNFR						USER_ID
						FROM
							PMG.LETS_SCHEDULE S WITH (NOLOCK)
						JOIN
							PMS.MPMS_USER_INFO10	U WITH (NOLOCK) 
						ON
							U.SAWONNO = S.OWN_USER_ID
						WHERE
							S.SHARE_USER_ID		= @ACCOUNT_ID
						AND (
								(S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE)
								OR
								(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE)
							)
					) S
			) S
			JOIN
				PMG.LETS_SCHEDULE M WITH (NOLOCK)
				ON
					M.SCHEDULE_SEQ = S.SCHEDULE_SEQ
		ORDER BY
			S.ITEM_id
		,	S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
	]]>
	</select>
	
	
	<!-- 오프라인 일정 업데이트 내용 조회 -->
	<select id="getOffLineScheduleUpdateData" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		DECLARE @SYNC_DATE VARCHAR(21)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		SET @END_DATE	= #END_DATE#
		SET @SYNC_DATE	= #SYNC_DATE#
		
		SELECT
			*
		FROM
			(
				SELECT
					SS.EAI_SEQ_ID
				,	SS.ITEM_ID
				,	SS.ITEM_TITLE
				,	SS.ITEM_PLACE
				,	SS.ITEM_START_DATE
				,	SS.ITEM_START_TIME
				,	SS.ITEM_END_DATE
				,	SS.ITEM_END_TIME
				,	SS.IS_WHOLE_DAY
				,	SS.IS_REPEAT
				,	SS.OWN_USER_ID
				,	SS.ITEM_CLOSE
				,	SS.DATA_INTERFACE_TYPE_CODE as 'Status'
				,	SS.APPLICATION_TRANSFER_DATE
				FROM
					(
						SELECT
							S.EAI_SEQ_ID
						,	S.ITEM_ID
						,	S.ITEM_TITLE
						,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
						,	S.ITEM_START_DATE
						,	S.ITEM_START_TIME
						,	S.ITEM_END_DATE
						,	S.ITEM_END_TIME
						,	S.IS_WHOLE_DAY
						,	S.IS_REPEAT
						,	S.OWN_USER_ID
						,	S.ITEM_CLOSE
						,	S.DATA_INTERFACE_TYPE_CODE
						,	S.APPLICATION_TRANSFER_DATE
						,	ROW_NUMBER() OVER (PARTITION BY S.ITEM_ID ORDER BY S.EAI_SEQ_ID DESC) ROWNUM
						FROM
							BW.BW_LETS_SCHEDULE_R_I S WITH (NOLOCK)
						WHERE
							(
								(S.OWN_USER_ID = @ACCOUNT_ID AND S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
								OR
								(S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
								OR
								(S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'S')
							)
						AND (
								(S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE)
								OR
								(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE)
							)
						AND S.APPLICATION_TRANSFER_DATE >= CONVERT(VARCHAR(19), @SYNC_DATE, 20)
						AND	S.DATA_INTERFACE_TYPE_CODE IN ('I', 'U')
					 ) SS
				 JOIN
					(
						SELECT
							*
						FROM
							(
								SELECT
									*
								,	ROW_NUMBER() OVER (PARTITION BY ITEM_ID ORDER BY DATA_INTERFACE_TYPE_CODE) ROWNUM
								FROM
								(
										SELECT
											S.EAI_SEQ_ID
										,	S.ITEM_ID
										,	S.DATA_INTERFACE_TYPE_CODE
										,	S.ITEM_TITLE
										,	S.SHARE_USER_ID
										,	S.APPLICATION_TRANSFER_DATE
										FROM
											BW.BW_LETS_SCHEDULE_R_I S WITH (NOLOCK)
										WHERE
											(
												(S.OWN_USER_ID = @ACCOUNT_ID AND S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
												OR
												(S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
												OR
												(S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'S')
											)
										AND (
												(S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR	S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE)
												OR
												(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE)
											)
										AND S.APPLICATION_TRANSFER_DATE >= CONVERT(VARCHAR(19), @SYNC_DATE, 20)
										AND	S.DATA_INTERFACE_TYPE_CODE IN ('I', 'U')
										UNION
										SELECT
											S.EAI_SEQ_ID
										,	S.ITEM_ID
										,	S.DATA_INTERFACE_TYPE_CODE
										,	S.ITEM_TITLE
										,	S.SHARE_USER_ID
										,	S.APPLICATION_TRANSFER_DATE
										FROM
											BW.BW_LETS_SCHEDULE_R_I S WITH (NOLOCK)
										WHERE
											(
												(S.OWN_USER_ID = @ACCOUNT_ID AND S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
												OR
												(S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
												OR
												(S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'S')
											)
										AND (
												(S.ITEM_START_DATE BETWEEN @START_DATE AND @END_DATE OR	S.ITEM_END_DATE BETWEEN @START_DATE AND @END_DATE)
												OR
												(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE OR @END_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE)
											)
										AND S.APPLICATION_TRANSFER_DATE >= CONVERT(VARCHAR(19), @SYNC_DATE, 20)
										AND	S.DATA_INTERFACE_TYPE_CODE IN ('I', 'U')
									) XX
							) X
						WHERE
							ROWNUM = 1
					) XX
					ON SS.ITEM_ID = XX.ITEM_ID
				 WHERE
					SS.ROWNUM = 1
				UNION
				SELECT
					S.EAI_SEQ_ID
				,	S.ITEM_ID
				,	S.ITEM_TITLE
				,	S.ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.IS_REPEAT
				,	S0.OWN_USER_ID
				,	S.ITEM_CLOSE
				,	S.DATA_INTERFACE_TYPE_CODE
				,	S.APPLICATION_TRANSFER_DATE
				FROM
					BW.BW_LETS_SCHEDULE_R_I S WITH (NOLOCK)
				JOIN
					(
						SELECT
							*
						FROM
							(
								SELECT
									ITEM_ID
								,	OWN_USER_ID
								,	ROW_NUMBER() OVER (PARTITION BY ITEM_ID ORDER BY EAI_SEQ_ID ASC) ROWNUM
								FROM
									BW.BW_LETS_SCHEDULE_R_I S WITH (NOLOCK)
								WHERE
									(
										(S.OWN_USER_ID = @ACCOUNT_ID AND S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
										OR
										(S.ATTRIBUTE1 = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'M')
										OR
										(S.SHARE_USER_ID = @ACCOUNT_ID AND S.ATTRIBUTE2 = 'S')
									)
							) SS
						WHERE
							ROWNUM = 1
				   ) S0
				   ON S.ITEM_ID = S0.ITEM_ID
				WHERE
					S.APPLICATION_TRANSFER_DATE >= CONVERT(VARCHAR(19), @SYNC_DATE, 20)
				AND	S.DATA_INTERFACE_TYPE_CODE = 'D'
				UNION
				SELECT
					S.EAI_SEQ_ID
				,	S.ITEM_ID
				,	NULL				ITEM_TITLE
				,	NULL				ITEM_PLACE
				,	NULL				ITEM_START_DATE
				,	NULL				ITEM_START_TIME
				,	NULL				ITEM_END_DATE
				,	NULL				ITEM_END_TIME
				,	NULL				IS_WHOLE_DAY
				,	NULL				IS_REPEAT
				,	S.OWN_USER_ID
				,	NULL				ITEM_CLOSE
				,	'D'					DATA_INTERFACE_TYPE_CODE
				,	S.APPLICATION_TRANSFER_DATE
				FROM
					pmg.BW_LETS_SCHEDULE_DELETED S WITH (NOLOCK)
				WHERE
					(S.OWN_USER_ID = @ACCOUNT_ID AND S.DATA_INTERFACE_TYPE_CODE != 'U')
				OR	S.SHARE_USER_ID = @ACCOUNT_ID
			) S
		ORDER BY
			S.EAI_SEQ_ID ASC
		,	S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
	]]>
	</select>	
	
	<!--오프라인 일정 마지막 싱크 시간 얻는 함수 -->
	<select id="GetServerTime" parameterClass="hashmap" resultClass="String">
	<![CDATA[
		SELECT CONVERT(VARCHAR, GETDATE(), 120) as SERVERTIME
	]]>
	</select>
	
	<select id="GetServerFakeTime" parameterClass="hashmap" resultClass="String">
	<![CDATA[
		SELECT CONVERT(VARCHAR, DATEADD(minute, #MIN#, #FAKE_TIME#), 120) as SERVERTIME
	]]>
	</select>

	<!-- 일정 상세 조회 -->
	<select id="getSchedule" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ITEM_ID		VARCHAR(100)
		DECLARE @ACCOUNT_ID		VARCHAR(100)
		
		SET @ITEM_ID		= #SCHEDULE_ID#
		SET @ACCOUNT_ID		= #ACCOUNT_ID#
		
		SELECT TOP 1
			S.ITEM_ID
		,	S.ITEM_TITLE
		,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
		,	ISNULL(S.ITEM_CONTENT, '')		ITEM_CONTENT
		,	S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
		,	S.IS_WHOLE_DAY
		,	S.ITEM_CLOSE
		,	S.OWN_USER_ID
		,	U.NAME							USER_NAME
		,	''								DEPT_NAME
		,	U.EMAIL
		,	U.POSITION
		,	U.USERIDNFR						USER_ID
		FROM
			PMG.LETS_SCHEDULE S WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_INFO10	U WITH (NOLOCK) 
			ON
				U.SAWONNO = S.OWN_USER_ID
		JOIN
			PMS.MPMS_USER_GROUP11	G1 WITH (NOLOCK)
			ON
				U.USERIDNFR = G1.USERIDNFR
		JOIN
			PMS.MPMS_USER_GROUP10	G0 WITH (NOLOCK)
			ON
				G1.GROUPIDNFR = G0.GROUPIDNFR
		WHERE
			S.SHARE_USER_ID IS NULL
		AND S.ITEM_ID = @ITEM_ID
	]]>
	</select>

	<!-- 일정 상세 조회 -->
	<select id="getScheduleSharedUsers" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ITEM_ID	VARCHAR(100)
		SET @ITEM_ID	= #SCHEDULE_ID#
		
		SELECT
			SHARE_USER_ID
		,	U.NAME					USER_NAME
		,	G0.NAME					DEPT_NAME
		,	U.EMAIL
		,	U.POSITION
		,	U.USERIDNFR				USER_ID
		FROM
			PMG.LETS_SCHEDULE S WITH (NOLOCK)
		JOIN
			PMS.MPMS_USER_INFO10	U WITH (NOLOCK)
			ON
				U.SAWONNO = S.SHARE_USER_ID
			AND	U.REGISTUSDSTCD = '10'
		JOIN
			PMS.MPMS_USER_GROUP11	G1 WITH (NOLOCK)
			ON
				U.USERIDNFR = G1.USERIDNFR
		JOIN
			PMS.MPMS_USER_GROUP10	G0 WITH (NOLOCK)
			ON
				G1.GROUPIDNFR = G0.GROUPIDNFR
		WHERE
			S.SHARE_USER_ID IS NOT NULL
		AND S.ITEM_ID = @ITEM_ID
	]]>
	</select>
	
	<!-- 오늘 이후 일정 목록 조회 -->
	<select id="getScheduleListAfterToday" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		
		SELECT
			*
		FROM
			(
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				,	CASE
						WHEN S.ITEM_START_DATE != S.ITEM_END_DATE THEN '1'
						ELSE '0'
					END		IS_CONSECUTION
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND (
						S.ITEM_START_DATE	>= @START_DATE
					OR	(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE) 
					)
				UNION
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				,	CASE
						WHEN S.ITEM_START_DATE != S.ITEM_END_DATE THEN '1'
						ELSE '0'
					END		IS_CONSECUTION
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND (
						S.ITEM_START_DATE	>= @START_DATE
					OR	(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE) 
					)
			) S
		ORDER BY
			S.ITEM_START_DATE ASC
		,	S.IS_WHOLE_DAY DESC
		,	S.IS_CONSECUTION DESC
		,	S.ITEM_START_TIME ASC
		,	S.ITEM_END_DATE ASC
		,	S.ITEM_END_TIME ASC
	]]>
	</select>
	
	<!-- 오늘 이후 일정 개수 조회 -->
	<select id="getScheduleCountAfterToday" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		
		SELECT
			COUNT(*)	TotalCount
		FROM
			(
				SELECT
					S.ITEM_ID
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND S.ITEM_START_DATE	>= @START_DATE
				UNION
				SELECT
					S.ITEM_ID
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND (
						S.ITEM_START_DATE	>= @START_DATE
					OR	(@START_DATE BETWEEN S.ITEM_START_DATE AND S.ITEM_END_DATE) 
					)
			) S

	]]>
	</select>
	
	<!-- 오늘 이전 일정 목록 조회 -->
	<select id="getScheduleListBeforeToday" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		
		SELECT
			*
		FROM
			(
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				,	CASE
						WHEN S.ITEM_START_DATE != S.ITEM_END_DATE THEN '1'
						ELSE '0'
					END		IS_CONSECUTION
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND S.ITEM_START_DATE	< @START_DATE
				UNION
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				,	CASE
						WHEN S.ITEM_START_DATE != S.ITEM_END_DATE THEN '1'
						ELSE '0'
					END		IS_CONSECUTION
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND S.ITEM_START_DATE	< @START_DATE
			) S
		ORDER BY
			S.ITEM_START_DATE DESC
		,	S.IS_WHOLE_DAY DESC
		,	S.IS_CONSECUTION DESC
		,	S.ITEM_START_TIME DESC
		,	S.ITEM_END_DATE DESC
		,	S.ITEM_END_TIME DESC
	]]>
	</select>

	<!-- 오늘 이전 일정 개수 조회 -->
	<select id="getScheduleCountBeforeToday" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE VARCHAR(8)
		DECLARE @END_DATE VARCHAR(8)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		
		SELECT
			COUNT(*)	TotalCount
		FROM
			(
				SELECT
					S.ITEM_ID
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				AND S.ITEM_START_DATE	< @START_DATE
				UNION
				SELECT
					S.ITEM_ID
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				AND S.ITEM_START_DATE	< @START_DATE
			) S
	]]>
	</select>
	
	<!-- 일정 검색 목록 조회 -->
	<select id="getScheduleSearchList" parameterClass="hashmap" resultClass="hashmap">
		DECLARE @ACCOUNT_ID	VARCHAR(100)
		DECLARE @START_DATE	VARCHAR(8)
		DECLARE @END_DATE	VARCHAR(8)
		DECLARE @TITLE		NVARCHAR(200)
		DECLARE @PLACE		NVARCHAR(200)
		DECLARE @BODY		NVARCHAR(200)
		
		SET @ACCOUNT_ID	= #ACCOUNT_ID#
		SET @START_DATE	= #START_DATE#
		SET @END_DATE	= #END_DATE#
		SET @TITLE		= #TITLE#
		SET @PLACE		= #PLACE#
		SET @BODY		= #BODY#
		
		SELECT
			*
		FROM
			(
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.OWN_USER_ID		= @ACCOUNT_ID
				AND	S.SHARE_USER_ID		IS NULL
				<isNotEmpty prepend ="AND " property="START_DATE">S.ITEM_START_DATE BETWEEN @START_DATE AND  @END_DATE</isNotEmpty>
				<isNotEmpty prepend ="AND " property="START_DATE">S.ITEM_END_DATE BETWEEN @START_DATE AND  @END_DATE</isNotEmpty>
				<isNotEmpty property="TITLE">AND	S.ITEM_TITLE LIKE '%' + @TITLE + '%'</isNotEmpty>
				<isNotEmpty property="PLACE">AND	S.ITEM_PLACE LIKE '%' + @PLACE + '%'</isNotEmpty>
				<isNotEmpty property="BODY">AND	S.ITEM_CONTENT LIKE '%' + @BODY + '%'</isNotEmpty>
				UNION
				SELECT
					S.ITEM_ID
				,	S.ITEM_TITLE
				,	ISNULL(S.ITEM_PLACE, '')		ITEM_PLACE
				,	S.ITEM_START_DATE
				,	S.ITEM_START_TIME
				,	S.ITEM_END_DATE
				,	S.ITEM_END_TIME
				,	S.IS_WHOLE_DAY
				,	S.OWN_USER_ID
				,	S.ITEM_CLOSE
				FROM
					PMG.LETS_SCHEDULE S WITH (NOLOCK)
				WHERE
					S.SHARE_USER_ID		= @ACCOUNT_ID
				<isNotEmpty prepend ="AND " property="START_DATE">S.ITEM_START_DATE BETWEEN @START_DATE AND  @END_DATE</isNotEmpty>
				<isNotEmpty prepend ="AND " property="START_DATE">S.ITEM_END_DATE BETWEEN @START_DATE AND  @END_DATE</isNotEmpty>
				<isNotEmpty prepend ="AND " property="TITLE">S.ITEM_TITLE LIKE '%' + @TITLE + '%'</isNotEmpty>
				<isNotEmpty prepend ="AND " property="PLACE">S.ITEM_PLACE LIKE '%' + @PLACE + '%'</isNotEmpty>
				<isNotEmpty prepend ="AND " property="BODY">S.ITEM_CONTENT LIKE '%' + @BODY + '%'</isNotEmpty>
			) S
		ORDER BY
			S.ITEM_START_DATE
		,	S.ITEM_START_TIME
		,	S.ITEM_END_DATE
		,	S.ITEM_END_TIME
	</select>

	<!-- 일정 삭제 -->
	<delete id="deleteSchedule" parameterClass="hashmap">
	<![CDATA[
		DELETE FROM
			PMG.LETS_SCHEDULE
		WHERE
			ITEM_ID = #SCHEDULE_ID#
	]]>
	</delete>
	
	<!-- 일정 삭제 -->
	<delete id="deleteSchedules" parameterClass="hashmap">
		DECLARE @DELETED_SCHEDULES	TABLE
		(
			SCHEDULE_SEQ			INT
		,	ITEM_ID					VARCHAR(27)
		,	ITEM_TYPE				VARCHAR(5)
		,	ITEM_START_DATE			VARCHAR(8)
		,	ITEM_END_DATE			VARCHAR(8)
		,	ITEM_START_TIME			VARCHAR(4)
		,	ITEM_END_TIME			VARCHAR(4)
		,	IS_WHOLE_DAY			NUMERIC(1, 0)
		,	ITEM_CLOSE				NUMERIC(1, 0)
		,	IS_REPEAT				NUMERIC(1, 0)
		,	REPEAT_GROUP_ID			VARCHAR(27)
		,	CATEGORY_ID				VARCHAR(27)
		,	ITEM_TITLE				NVARCHAR(1024)
		,	ITEM_PLACE				NVARCHAR(256)
		,	ITEM_CONTENT			NTEXT
		,	OWN_USER_ID				VARCHAR(64)
		,	IS_REQUEST_ATTENDANCE	NUMERIC(1, 0)
		,	ITEM_ATTACH_CNT			NUMERIC(1, 0)
		,	IS_REGIST_MINUTES		NUMERIC(1, 0)
		,	ITEM_ALARM				VARCHAR(12)
		,	IS_MEETING				NUMERIC(1, 0)
		,	IS_MTROOM				NUMERIC(1, 0)
		,	TEMP_SAVE_FLAG			NUMERIC(1, 0)
		,	ACTION_ITEM_CNT			NUMERIC(1, 0)
		,	IS_GROUP_SHARE			NUMERIC(1, 0)
		,	SHARE_USER_ID			VARCHAR(64)
		,	IS_JOIN					NUMERIC(1, 0)
		,	IS_ATTENDANCE			NUMERIC(1, 0)
		,	ABSENCE_RSN				VARCHAR(300)
		,	REGIST_USER_ID			VARCHAR(64)
		,	REGIST_USER_NAME		VARCHAR(100)
		,	REGIST_DATE				DATETIME
		,	MODIFY_USER_ID			VARCHAR(64)
		,	MODIFY_USER_NAME		VARCHAR(100)
		,	MODIFY_DATE				DATETIME
		)
	
		DELETE FROM
			PMG.LETS_SCHEDULE
		OUTPUT
			DELETED.*
		INTO
			@DELETED_SCHEDULES			
		WHERE
			ITEM_ID IN <iterate property="SCHEDULE_IDS"  open="(" close=")" conjunction=",">#SCHEDULE_IDS[]#</iterate>
			
		INSERT INTO BW.BW_LETS_SCHEDULE_S_I
		SELECT
			'D'
		,	GETDATE()
		,	'N'
		,	NULL
		,	ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	SHARE_USER_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	MODIFY_DATE
		FROM
			@DELETED_SCHEDULES
	</delete>

	<!-- 공유 일정 삭제 -->
	<delete id="deleteSharedSchedule" parameterClass="hashmap">
		DELETE FROM
			PMG.LETS_SCHEDULE		
		WHERE
			ITEM_ID = #SCHEDULE_ID#
			<isNotNull property="ATTENDEES_IDS" prepend="AND ">
				SHARE_USER_ID IN <iterate property="ATTENDEES_IDS"  open="(" close=")" conjunction=",">#ATTENDEES_IDS[]#</iterate>
			</isNotNull>
			<isNull property="ATTENDEES_IDS" prepend="AND ">
				SHARE_USER_ID != OWN_USER_ID
			</isNull>
	</delete>
	
	<!-- 일정 추가 -->
	<insert id="insertSchedule" parameterClass="hashmap">
		<selectKey keyProperty="SCHEDULE_SEQ" resultClass="java.lang.String">
			DECLARE @ACCOUNT_ID			VARCHAR(64)
			DECLARE @SCHEDULE_ID		VARCHAR(27)
			DECLARE @IS_SHARE			NUMERIC(1, 0)
			DECLARE @IS_ALL_DAY_EVENT	NUMERIC(1, 0)
			DECLARE @START_DATE			VARCHAR(8)
			DECLARE @START_TIME			VARCHAR(4)
			DECLARE @END_DATE			VARCHAR(8)
			DECLARE @END_TIME			VARCHAR(4)
			DECLARE @TITLE				NVARCHAR(1024)
			DECLARE @PLACE				NVARCHAR(256)
			DECLARE @BODY				NVARCHAR(MAX)
			DECLARE @SCHEDULE_SEQ		INT
			
			SET @ACCOUNT_ID				= #ACCOUNT_ID#
			SET @SCHEDULE_ID			= #SCHEDULE_ID#
			SET @IS_SHARE				= #IS_SHARE#
			SET @IS_ALL_DAY_EVENT		= #IS_ALL_DAY_EVENT#
			SET @START_DATE				= #START_DATE#
			SET @START_TIME				= #START_TIME#
			SET @END_DATE				= #END_DATE#
			SET @END_TIME				= #END_TIME#
			SET @TITLE					= #TITLE#
			SET @PLACE					= #PLACE#
			SET @BODY					= #BODY#
			
			INSERT INTO PMG.LETS_SCHEDULE
			(
				ITEM_ID
			,	ITEM_TYPE
			,	ITEM_START_DATE
			,	ITEM_END_DATE
			,	ITEM_START_TIME
			,	ITEM_END_TIME
			,	IS_WHOLE_DAY
			,	ITEM_CLOSE
			,	IS_REPEAT
			,	REPEAT_GROUP_ID
			,	CATEGORY_ID
			,	ITEM_TITLE
			,	ITEM_PLACE
			,	ITEM_CONTENT
			,	OWN_USER_ID
			,	IS_REQUEST_ATTENDANCE
			,	ITEM_ATTACH_CNT
			,	IS_REGIST_MINUTES
			,	ITEM_ALARM
			,	IS_MEETING
			,	IS_MTROOM
			,	TEMP_SAVE_FLAG
			,	ACTION_ITEM_CNT
			,	IS_GROUP_SHARE
			,	SHARE_USER_ID
			,	IS_JOIN
			,	IS_ATTENDANCE
			,	ABSENCE_RSN
			,	REGIST_USER_ID
			,	REGIST_USER_NAME
			,	REGIST_DATE
			,	MODIFY_USER_ID
			,	MODIFY_USER_NAME
			,	MODIFY_DATE
			)
			SELECT
				@SCHEDULE_ID
			,	'M'
			,	@START_DATE
			,	@END_DATE
			,	@START_TIME
			,	@END_TIME
			,	@IS_ALL_DAY_EVENT
			,	@IS_SHARE
			,	0
			,	@SCHEDULE_ID
			,	'1259632696491'
			,	@TITLE
			,	@PLACE
			,	@BODY
			,	@ACCOUNT_ID
			,	0
			,	0
			,	0
			,	0
			,	0
			,	0
			,	0
			,	0
			,	0
			,	NULL
			,	0
			,	0
			,	NULL
			,	@ACCOUNT_ID
			,	ISNULL(U.name, '')
			,	GETDATE()
			,	@ACCOUNT_ID
			,	ISNULL(U.name, '')
			,	GETDATE()
			FROM
				pms.mPMS_USER_INFO10 U
			WHERE
				@ACCOUNT_ID = U.sawonNo
			
			SET @SCHEDULE_SEQ = SCOPE_IDENTITY()
			SET @SCHEDULE_ID = 'MO_' + RIGHT('000000000000' + CONVERT(VARCHAR(12), @SCHEDULE_SEQ), 12);
			
			UPDATE PMG.LETS_SCHEDULE
			SET
				ITEM_ID			= @SCHEDULE_ID
			,	REPEAT_GROUP_ID = @SCHEDULE_ID
			WHERE
				SCHEDULE_SEQ	= @SCHEDULE_SEQ
	
			INSERT INTO bw.BW_LETS_SCHEDULE_S_I
			SELECT
				'I'
			,	GETDATE()
			,	'N'
			,	NULL
			,	ITEM_ID
			,	ITEM_TYPE
			,	ITEM_START_DATE
			,	ITEM_END_DATE
			,	ITEM_START_TIME
			,	ITEM_END_TIME
			,	IS_WHOLE_DAY
			,	ITEM_CLOSE
			,	IS_REPEAT
			,	REPEAT_GROUP_ID
			,	CATEGORY_ID
			,	ITEM_TITLE
			,	ITEM_PLACE
			,	ITEM_CONTENT
			,	OWN_USER_ID
			,	IS_REQUEST_ATTENDANCE
			,	ITEM_ATTACH_CNT
			,	IS_REGIST_MINUTES
			,	ITEM_ALARM
			,	IS_MEETING
			,	IS_MTROOM
			,	TEMP_SAVE_FLAG
			,	ACTION_ITEM_CNT
			,	IS_GROUP_SHARE
			,	SHARE_USER_ID
			,	IS_JOIN
			,	IS_ATTENDANCE
			,	ABSENCE_RSN
			,	REGIST_USER_ID
			,	REGIST_USER_NAME
			,	REGIST_DATE
			,	MODIFY_USER_ID
			,	MODIFY_USER_NAME
			,	MODIFY_DATE
			FROM
				PMG.LETS_SCHEDULE
			WHERE
				SCHEDULE_SEQ = @SCHEDULE_SEQ
				
			SELECT @SCHEDULE_ID SCHEDULE_ID
		</selectKey>
	</insert>
	
	<!-- 공유 일정 추가 -->
	<insert id="insertSharedSchedule" parameterClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID			VARCHAR(100)
		DECLARE @ATTENDEES_ID		VARCHAR(100)
		DECLARE @SCHEDULE_ID		VARCHAR(100)
		DECLARE @SCHEDULE_SEQ		INT
		
		SET @ACCOUNT_ID				= #ACCOUNT_ID#
		SET @ATTENDEES_ID			= #ATTENDEES_ID#
		SET @SCHEDULE_ID			= #SCHEDULE_ID#
		
		INSERT INTO PMG.LETS_SCHEDULE
		(
			ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	SHARE_USER_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		)
		OUTPUT
			INSERTED.SCHEDULE_SEQ
		SELECT
			ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	@ATTENDEES_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM
			PMG.LETS_SCHEDULE
		WHERE
			ITEM_ID			= @SCHEDULE_ID
		AND	OWN_USER_ID		= @ACCOUNT_ID
		AND	SHARE_USER_ID	IS NULL

		SET @SCHEDULE_SEQ = SCOPE_IDENTITY()

		INSERT INTO bw.BW_LETS_SCHEDULE_S_I
		SELECT
			'I'
		,	GETDATE()
		,	'N'
		,	NULL
		,	ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	SHARE_USER_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM
			PMG.LETS_SCHEDULE
		WHERE
			SCHEDULE_SEQ = @SCHEDULE_SEQ
	]]>
	</insert>
	
	<!-- 일정 수정 -->
	<update id="updateSchedule" parameterClass="hashmap">
	<![CDATA[
		DECLARE @ACCOUNT_ID			VARCHAR(64)
		DECLARE @SCHEDULE_ID		VARCHAR(27)
		DECLARE @IS_SHARE			NUMERIC(1, 0)
		DECLARE @IS_ALL_DAY_EVENT	NUMERIC(1, 0)
		DECLARE @START_DATE			VARCHAR(8)
		DECLARE @START_TIME			VARCHAR(4)
		DECLARE @END_DATE			VARCHAR(8)
		DECLARE @END_TIME			VARCHAR(4)
		DECLARE @TITLE				NVARCHAR(1024)
		DECLARE @PLACE				NVARCHAR(256)
		DECLARE @BODY				NVARCHAR(MAX)
		DECLARE @UPDATED_SCHEDULES	TABLE (SCHEDULE_SEQ INT)
		
		SET @ACCOUNT_ID				= #ACCOUNT_ID#
		SET @SCHEDULE_ID			= #SCHEDULE_ID#
		SET @IS_SHARE				= #IS_SHARE#
		SET @IS_ALL_DAY_EVENT		= #IS_ALL_DAY_EVENT#
		SET @START_DATE				= #START_DATE#
		SET @START_TIME				= #START_TIME#
		SET @END_DATE				= #END_DATE#
		SET @END_TIME				= #END_TIME#
		SET @TITLE					= #TITLE#
		SET @PLACE					= #PLACE#
		SET @BODY					= #BODY#

		UPDATE
			PMG.LETS_SCHEDULE
		SET 
			ITEM_START_DATE			= @START_DATE
		,	ITEM_END_DATE			= @END_DATE
		,	ITEM_START_TIME			= @START_TIME
		,	ITEM_END_TIME			= @END_TIME
		,	IS_WHOLE_DAY			= @IS_ALL_DAY_EVENT
		,	ITEM_CLOSE				= @IS_SHARE
		,	ITEM_TITLE				= @TITLE
		,	ITEM_PLACE				= @PLACE
		,	ITEM_CONTENT			= @BODY
		,	REGIST_USER_ID			= @ACCOUNT_ID
		,	REGIST_USER_NAME		= U.name
		,	MODIFY_USER_ID			= @ACCOUNT_ID
		,	MODIFY_USER_NAME		= U.name
		,	MODIFY_DATE				= GETDATE()
		OUTPUT
			INSERTED.SCHEDULE_SEQ
		INTO
			@UPDATED_SCHEDULES
		FROM
			pms.mPMS_USER_INFO10	U	
		WHERE
			ITEM_ID					= @SCHEDULE_ID
		AND	OWN_USER_ID				= @ACCOUNT_ID
		AND	SHARE_USER_ID			IS NULL
		AND U.sawonNo				= @ACCOUNT_ID
		
		INSERT INTO bw.BW_LETS_SCHEDULE_S_I
		SELECT
			'D'
		,	GETDATE()
		,	'N'
		,	NULL
		,	ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	SHARE_USER_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM
			PMG.LETS_SCHEDULE
		WHERE
			SCHEDULE_SEQ IN (SELECT SCHEDULE_SEQ FROM @UPDATED_SCHEDULES)
			
		INSERT INTO bw.BW_LETS_SCHEDULE_S_I
		SELECT
			'I'
		,	GETDATE()
		,	'N'
		,	NULL
		,	ITEM_ID
		,	ITEM_TYPE
		,	ITEM_START_DATE
		,	ITEM_END_DATE
		,	ITEM_START_TIME
		,	ITEM_END_TIME
		,	IS_WHOLE_DAY
		,	ITEM_CLOSE
		,	IS_REPEAT
		,	REPEAT_GROUP_ID
		,	CATEGORY_ID
		,	ITEM_TITLE
		,	ITEM_PLACE
		,	ITEM_CONTENT
		,	OWN_USER_ID
		,	IS_REQUEST_ATTENDANCE
		,	ITEM_ATTACH_CNT
		,	IS_REGIST_MINUTES
		,	ITEM_ALARM
		,	IS_MEETING
		,	IS_MTROOM
		,	TEMP_SAVE_FLAG
		,	ACTION_ITEM_CNT
		,	IS_GROUP_SHARE
		,	SHARE_USER_ID
		,	IS_JOIN
		,	IS_ATTENDANCE
		,	ABSENCE_RSN
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM
			PMG.LETS_SCHEDULE
		WHERE
			SCHEDULE_SEQ IN (SELECT SCHEDULE_SEQ FROM @UPDATED_SCHEDULES)
	]]>
	</update>
	
	<!-- 게시판 목록 조회 -->
	<select id="getBoardList" parameterClass="hashmap" resultClass="hashmap">
		SELECT
			BOARD_NAME
		,	BOARD_ID
		,	''			PARENT_ID
		,	1			DEPTH
		,	0			TODAY_COUNT
		,	0			UNREAD_COUNT
		,	'0'			PERMISSION
		FROM
			TAP.BD_BOARD  WITH (NOLOCK)
		WHERE
			BOARD_ID IN <iterate property="BOARD_IDS"  open="(" close=")" conjunction=",">#BOARD_IDS[]#</iterate>	
		ORDER BY BOARD_ID ASC		
	</select>	

	<!-- 게시물 목록 -->
	<select id="getArticleList" parameterClass="hashmap"  resultClass="hashmap">
		SELECT
			*
		FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY IS_NOTICE DESC, I.REGIST_DATE DESC)		AS DISP_ORDER
				,	I.ITEM_ID											AS ARTICLE_ID
				,	I.ITEM_TITLE 										AS SUBJECT
				,	IS_NOTICE											AS ARTICLE_TYPE
				,	I.REGIST_USER_ID 									AS REG_ACCOUNT_ID
				,	ISNULL(I.REGIST_USER_NAME, U.NAME)					AS REG_ACCOUNT_NAME
				,	ISNULL(U.DEPTNAME, I.REGIST_USER_NAME)				AS REG_DEPT_NAME
				,	REGIST_DATE											AS REG_DATE
				,	(
						CASE
							WHEN I.ITEM_ATTACH_CNT > 0 THEN '1'
							ELSE '0'
						END
					) 													AS IS_ATTACH
				FROM
					TAP.BD_BOARD_ITEM I WITH (NOLOCK)
				LEFT JOIN
					PMS.MPMS_USER_INFO10 U WITH (NOLOCK)
					ON
						U.SAWONNO = I.REGIST_USER_ID
					AND	U.REGISTUSDSTCD = '10'
				WHERE
					I.BOARD_ID = #BOARD_ID#
				AND I.STATUS = 'A'
				AND
					(
						<isNotNull property="ITEM_TITLE">I.ITEM_TITLE LIKE '%' + #ITEM_TITLE# + '%'</isNotNull>
						<isNull property="ITEM_TITLE">1 = 0</isNull>
					OR
						<isNotNull property="REGIST_USER_NAME">I.REGIST_USER_NAME LIKE '%' + #REGIST_USER_NAME# + '%'</isNotNull>
						<isNull property="REGIST_USER_NAME">1 = 0</isNull>
					)
			) T
		WHERE
			T.DISP_ORDER BETWEEN #BEGIN_NUM# AND #END_NUM#
	</select>


	<!-- 게시물 개수 -->
	<select id="getTotalArticleCount" parameterClass="hashmap"  resultClass="hashmap">
		SELECT
			COUNT(*) 							AS COUNT
		FROM
			tap.BD_BOARD_ITEM 					I WITH (NOLOCK)
		LEFT JOIN
			pms.mPMS_USER_INFO10 				U WITH (NOLOCK)
			ON
				U.SAWONNO = I.REGIST_USER_ID
		WHERE
			I.BOARD_ID = #BOARD_ID#
		AND I.STATUS = 'A'
		AND
			(
				<isNotNull property="ITEM_TITLE">I.ITEM_TITLE LIKE '%' + #ITEM_TITLE# + '%'</isNotNull>
				<isNull property="ITEM_TITLE">1 = 0</isNull>
			OR
				<isNotNull property="REGIST_USER_NAME">I.REGIST_USER_NAME LIKE '%' + #REGIST_USER_NAME# + '%'</isNotNull>
				<isNull property="REGIST_USER_NAME">1 = 0</isNull>
			)
	</select>

	<!-- 게시물 상세 -->
	<select id="getArticleDetail" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			I.ITEM_ID								AS ARTICLE_ID
		,	I.IS_NOTICE								AS ARTICLE_TYPE
		,	I.ITEM_TITLE 							AS SUBJECT
		,	I.REGIST_USER_ID 						AS REG_ACCOUNT_ID
		,	ISNULL(I.REGIST_USER_NAME, U.NAME)		AS REG_ACCOUNT_NAME
		,	ISNULL(U.DEPTNAME, I.REGIST_USER_NAME)	AS REG_DEPT_NAME
		,	I.REGIST_DATE							AS REG_DATE
		,	I.MODIFY_DATE							AS LAST_EDIT_DATE
		,	I.PERMISSION_TYPE						AS PERMISSION
		,	I.ITEM_CONTENT 							AS BODY
		,	I.ITEM_ATTACH_CNT						AS ATTACH_COUNT
		,	I.ITEM_LINE_REPLY_CNT					AS COMMENT_COUNT
		,	'1'										AS COMMENT_IS_ENABLE_REG
		,	I.BOARD_ID
		,	ISNULL(U.EMAIL, I.REGIST_USER_ID + '@lgdisplay.com') AS EMAIL
		FROM
			tap.BD_BOARD_ITEM 						I WITH (NOLOCK)
		LEFT JOIN
			pms.mPMS_USER_INFO10 					U WITH (NOLOCK)
			ON
				U.SAWONNO	= I.REGIST_USER_ID
			AND	U.REGISTUSDSTCD = '10'
		WHERE
				I.ITEM_ID	= #ARTICLE_ID#	
	]]>
	</select>

	<!-- 댓글 목록 -->
	<select id="getCommentList"  parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			*
		FROM
			(
				SELECT
					CAST((ROW_NUMBER() OVER (ORDER BY R.REGIST_DATE DESC)) AS VARCHAR(18)) 	AS DISP_ORDER
				,	CAST(R.REPLY_ID AS VARCHAR(18))											AS COMMENT_ID
				,	U.NAME																	AS REG_ACCOUNT_NAME
				,	R.REGIST_DATE															AS REG_DATE
				,	R.REPLY_CONTENT															AS BODY
				,	R.REGIST_USER_ID														AS REG_ACCOUNT_ID
				,	ISNULL(U.DEPTNAME, R.REGIST_USER_NAME)									AS REG_ACCOUNT_DEPT
				,	(
						CASE
							WHEN (#ACCOUNT_ID# = REGIST_USER_ID) THEN '1'
							ELSE '0'
						END
					)																		AS IS_ENABLE_DELETE
				,	U.EMAIL
				FROM
					TAP.BD_LINE_REPLY R WITH (NOLOCK)
				LEFT JOIN
					PMS.mPMS_USER_INFO10 U WITH (NOLOCK)
					ON
						U.SAWONNO	= R.REGIST_USER_ID
				WHERE
					ITEM_ID			= #ARTICLE_ID#
			) T
		WHERE
			T.DISP_ORDER			BETWEEN #BEGIN_NUM# AND #END_NUM#	
	]]>
	</select>

	<!-- 댓글 개수 -->
	<select id="getTotalCommentCount"  parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			COUNT(*)			AS COUNT
		FROM
			tap.BD_LINE_REPLY	R WITH (NOLOCK)
		WHERE
			ITEM_ID = #ARTICLE_ID#
	]]>
	</select>
	
	<!-- 댓글 상세 조회 -->
	<select id="getCommentDetail" parameterClass="hashmap" resultClass="hashmap">
	<![CDATA[
		SELECT
			R.REPLY_ID																AS COMMENT_ID
		,	R.REGIST_USER_NAME														AS REG_ACCOUNT_NAME
		,	ISNULL(U.DEPTNAME, R.REGIST_USER_NAME)									AS REG_ACCOUNT_DEPT
		,	R.REGIST_DATE															AS REG_DATE
		,	R.REPLY_CONTENT															AS BODY
		,	'1'																		AS IS_ENABLE_DELETE
		FROM
			TAP.BD_LINE_REPLY		R WITH (NOLOCK)
		LEFT JOIN
			PMS.MPMS_USER_INFO10	U WITH (NOLOCK)
			ON
				U.SAWONNO															= R.REGIST_USER_ID
		WHERE
			R.REPLY_ID																= #COMMENT_ID#
	]]>
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="insertComment" parameterClass="hashmap">
	<![CDATA[
		DECLARE @INSERTED_SEQ		INT
		
		INSERT INTO  TAP.BD_LINE_REPLY
		(
			REPLY_ID
		,	REPLY_CONTENT
		,	ITEM_ID
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		)
		SELECT
			''
		,	#BODY#
		,	#ARTICLE_ID#
		,	#ACCOUNT_ID#
		,	NAME
		,	GETDATE()
		,	#ACCOUNT_ID#
		,	NAME
		,	GETDATE()
		FROM
			PMS.MPMS_USER_INFO10 	U WITH (NOLOCK)
		WHERE
			U.SAWONNO				= #ACCOUNT_ID#
		AND	U.REGISTUSDSTCD			= '10'
		
		SET @INSERTED_SEQ = SCOPE_IDENTITY()

		UPDATE TAP.BD_LINE_REPLY SET REPLY_ID = 'mo_' + REPLACE(STR(SCOPE_IDENTITY(), 10), ' ', '0') WHERE SEQ_ID = SCOPE_IDENTITY()
		UPDATE TAP.BD_BOARD_ITEM SET ITEM_LINE_REPLY_CNT = ITEM_LINE_REPLY_CNT + 1 WHERE ITEM_ID = #ARTICLE_ID#
		
		INSERT INTO bw.IKEP_BD1_BD_LINE_REPLY_O
		(
			DATA_INTERFACE_TYPE_CODE
		,	DATA_INTERFACE_DATE
		,	EAI_TRANSFER_FLAG
		,	EAI_TRANSFER_DATE
		,	REPLY_ID
		,	REPLY_CONTENT
		,	ITEM_ID
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		)
		SELECT
			'I'
		,	GETDATE()
		,	'N'
		,	NULL
		,	REPLY_ID
		,	REPLY_CONTENT
		,	ITEM_ID
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM 
			TAP.BD_LINE_REPLY
		WHERE
			SEQ_ID = @INSERTED_SEQ
	]]>		
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteComment" parameterClass="java.util.HashMap">
	<![CDATA[
		DECLARE @DELETED_REPLY TABLE
		(
			SEQ_ID				NUMERIC(18, 0)
		,	REPLY_ID			VARCHAR(27)
		,	REPLY_CONTENT		NVARCHAR(4000)
		,	ITEM_ID				VARCHAR(34)
		,	REGIST_USER_ID		VARCHAR(64)
		,	REGIST_USER_NAME	NVARCHAR(64)
		,	REGIST_DATE			DATETIME
		,	MODIFY_USER_ID		VARCHAR(64)
		,	MODIFY_USER_NAME	NVARCHAR(64)
		,	MODIFY_DATE			DATETIME
		,	ATTRIBUTE1			VARCHAR(200)
		,	ATTRIBUTE2			VARCHAR(200)
		,	ATTRIBUTE3			VARCHAR(200)			
		)
		
		DELETE 
		FROM
			tap.BD_LINE_REPLY
		OUTPUT
			DELETED.*
		INTO
			@DELETED_REPLY
		WHERE
			REPLY_ID = #COMMENT_ID#
			
		UPDATE
			tap.BD_BOARD_ITEM
		SET
			ITEM_LINE_REPLY_CNT = 0.5 * ((ITEM_LINE_REPLY_CNT - 1) + ABS(ITEM_LINE_REPLY_CNT - 1)) 
		WHERE
			ITEM_ID = #ARTICLE_ID#
			
		INSERT INTO bw.IKEP_BD1_BD_LINE_REPLY_O
		(
			DATA_INTERFACE_TYPE_CODE
		,	DATA_INTERFACE_DATE
		,	EAI_TRANSFER_FLAG
		,	EAI_TRANSFER_DATE
		,	REPLY_ID
		,	REPLY_CONTENT
		,	ITEM_ID
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		)
		SELECT
			'D'
		,	GETDATE()
		,	'N'
		,	NULL
		,	REPLY_ID
		,	REPLY_CONTENT
		,	ITEM_ID
		,	REGIST_USER_ID
		,	REGIST_USER_NAME
		,	REGIST_DATE
		,	MODIFY_USER_ID
		,	MODIFY_USER_NAME
		,	MODIFY_DATE
		FROM 
			@DELETED_REPLY
	]]>
	</delete>
	
	<select id="getUserGroupInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			U.LEGACYDEPTPK					AS DEPT_ID
		,	E.FIELD18						AS BUSINESS_GROUP_ID
		,	E.FIELD19						AS SUBSIDIARY_NAME
		,	CASE WHEN E.GROUPCOCD = 'LGD' 
			THEN '1' 
			ELSE '0' END					AS IS_LGD_EMP
		FROM
			pms.MPMS_USER_INFO10 			U WITH (NOLOCK)
		JOIN
			pms.MPMS_USER_INFO11 			E WITH (NOLOCK)
			ON U.SAWONNO = E.SAWONNO
			AND U.GROUPCOCD = E.GROUPCOCD	
		WHERE
			U.SAWONNO = #ACCOUNT_ID#
	]]>
	</select>

	<select id="getArticlePermission" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			PERMISSION_TYPE														AS PERMISSION_TYPE
		,	OPEN_US_PERMISSION													AS OPEN_US_PERMISSION
		,	OPEN_KR_PERMISSION													AS OPEN_KR_PERMISSION
		,	OPEN_WR_PERMISSION													AS OPEN_WR_PERMISSION
		,	OPEN_RS_PERMISSION													AS OPEN_RS_PERMISSION
		,	OPEN_NJ_PERMISSION													AS OPEN_NJ_PERMISSION
		,	OPEN_GZ_PERMISSION													AS OPEN_GZ_PERMISSION
		,	OPEN_CA_PERMISSION													AS OPEN_CA_PERMISSION
		,	OPEN_YT_PERMISSION													AS OPEN_YT_PERMISSION
		,	OPEN_ALL_PERMISSION													AS OPEN_ALL_PERMISSION
		FROM
			tap.BD_BOARD_ITEM													I WITH (NOLOCK)
		WHERE
			I.ITEM_ID = #ARTICLE_ID#
	]]>
	</select>

	<select id="getBoardPermission" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			OPEN_READ_PERMISSION												AS OPEN_KR_PERMISSION
		,	OPEN_WR_PERMISSION													AS OPEN_WR_PERMISSION
		,	OPEN_US_PERMISSION													AS OPEN_US_PERMISSION
		,	OPEN_RS_PERMISSION													AS OPEN_RS_PERMISSION
		,	OPEN_NJ_PERMISSION													AS OPEN_NJ_PERMISSION
		,	OPEN_GZ_PERMISSION													AS OPEN_GZ_PERMISSION
		,	OPEN_CA_PERMISSION													AS OPEN_CA_PERMISSION
		,	OPEN_YT_PERMISSION													AS OPEN_YT_PERMISSION															
		,	OPEN_ALL_PERMISSION													AS OPEN_ALL_PERMISSION
		FROM
			tap.BD_BOARD														I WITH (NOLOCK)
		WHERE
			I.BOARD_ID = #BOARD_ID#
	]]>
	</select>
	
	<select id="checkBoardPermission" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			CASE WHEN COUNT(*) > 0 THEN '1' ELSE '0' END						AS HAS_PERMISSION
		FROM
			tap.BD_BOARD_PERMISSION WITH (NOLOCK)
		WHERE
			BOARD_ID = #BOARD_ID#
		AND	(USER_ID = #ACCOUNT_ID# OR GROUP_ID = #DEPT_ID# OR GROUP_ID = #COP_CODE#)
	]]>
	</select>

	<select id="checkArticlePermission" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			CASE WHEN COUNT(*) > 0 THEN '1' ELSE '0' END						AS HAS_PERMISSION
		FROM
			tap.BD_BOARD_ITEM_PERMISSION WITH (NOLOCK)
		WHERE
			ITEM_ID = #ARTICLE_ID#
		AND	(USER_ID = #ACCOUNT_ID# OR GROUP_ID = #DEPT_ID# OR GROUP_ID = #COP_CODE#)
	]]>
	</select>
	
	<insert id="insertPushkey" parameterClass="java.util.HashMap">
	<![CDATA[
		DECLARE @APPIDNFR			NUMERIC(18, 0)
		DECLARE @APP_ID				VARCHAR(100)
		DECLARE @WIFI				VARCHAR(100)
		DECLARE @DEVICE_TOKEN		VARCHAR(300)
		
		SET @APP_ID				= #APP_ID#
		SET @WIFI				= #WIFI#
		SET @DEVICE_TOKEN		= #DEVICE_TOKEN#
		
		SELECT TOP 1
			@APP_ID = A.APP_IDNFR
		FROM
			TAP.MTAP_APPINFO10 A
		JOIN
			TAP.MTAP_VERMNGR11 V
			ON A.APP_IDNFR = V.APP_IDNFR
		WHERE
			V.PACKAGE_NAME	= @APP_ID
		AND	A.OS_TYPE		= '20'
		
		INSERT INTO PMS.MPMS_PUSH_KEY_INFO
		(
			SVCIDNFR
		,	USERDEVCEIDNFR
		,	PCPUSHKEY
		,	APNSPUSHKEY
		,	GCMPUSHKEY
		,	FIRSTREGIDT
		,	FIRSTWORKER
		,	LASTMODFIDT
		,	LASTWORKER
		,	APPIDNFR
		)
		SELECT
			0
		,	D.USERDEVCEIDNFR
		,	NULL
		,	@DEVICE_TOKEN
		,	NULL
		,	GETDATE()
		,	D.USERIDNFR
		,	GETDATE()
		,	D.USERIDNFR
		,	@APP_ID
		FROM
			PMS.MPMS_USER_DEVICE10 D
		WHERE
			D.REGISTUSDSTCD = '10'
		AND	D.WIFI = @WIFI
	]]>
	</insert>

	<update id="updatePushkey" parameterClass="java.util.HashMap">
	<![CDATA[
		DECLARE @APPIDNFR			NUMERIC(18, 0)
		DECLARE @APP_ID				VARCHAR(100)
		DECLARE @WIFI				VARCHAR(100)
		DECLARE @DEVICE_TOKEN		VARCHAR(300)
		
		SET @APP_ID				= #APP_ID#
		SET @WIFI				= #WIFI#
		SET @DEVICE_TOKEN		= #DEVICE_TOKEN#
		
		SELECT TOP 1
			@APP_ID = A.APP_IDNFR
		FROM
			TAP.MTAP_APPINFO10 A
		JOIN
			TAP.MTAP_VERMNGR11 V
			ON A.APP_IDNFR = V.APP_IDNFR
		WHERE
			V.PACKAGE_NAME	= @APP_ID
		AND	A.OS_TYPE		= '20'
		
		UPDATE PMS.MPMS_PUSH_KEY_INFO
		SET
			SVCIDNFR			= 0
		,	APNSPUSHKEY			= @DEVICE_TOKEN
		,	LASTMODFIDT			= GETDATE()
		,	LASTWORKER			= D.USERIDNFR
		,	APPIDNFR			= @APP_ID
		FROM
			PMS.MPMS_PUSH_KEY_INFO P
		JOIN
			PMS.MPMS_USER_DEVICE10 D
			ON P.USERDEVCEIDNFR = D.USERDEVCEIDNFR AND D.REGISTUSDSTCD = '10' AND D.WIFI = @WIFI
		WHERE
			P.APPIDNFR = @APP_ID
		AND	P.SVCIDNFR = 0		
	]]>
	</update>	
	
	<select id="getPushKey" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		DECLARE @APPIDNFR			NUMERIC(18, 0)
		DECLARE @APP_ID				VARCHAR(100)
		DECLARE @WIFI				VARCHAR(100)
		
		SET @APP_ID				= #APP_ID#
		SET @WIFI				= #WIFI#
		
		SELECT
			*
		FROM
			PMS.MPMS_PUSH_KEY_INFO P
		JOIN
			PMS.MPMS_USER_DEVICE10 D	
			ON P.USERDEVCEIDNFR = D.USERDEVCEIDNFR AND D.REGISTUSDSTCD = '10' AND D.WIFI = @WIFI
		WHERE
			P.APPIDNFR = 
			( 		
					SELECT TOP 1
						A.APP_IDNFR
					FROM
						TAP.MTAP_APPINFO10 A
					JOIN
						TAP.MTAP_VERMNGR11 V
					ON A.APP_IDNFR = V.APP_IDNFR
					WHERE
					V.PACKAGE_NAME	= @APP_ID
					AND	A.OS_TYPE		= '20'
			)
		AND	P.SVCIDNFR = 0
	]]>
	</select>	
	
	<select id="insertConnectRequestLog" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		INSERT INTO tap.MTAP_CONNECTINFO10
		(
			APP_IDNFR
		,	ACCOUNT_ID
		,	DEVICE_IDNFR
		,	DEVICE_REQ_DATE
		)
		OUTPUT inserted.CONNECT_IDNFR 					AS CONNECT_ID
		(
			SELECT
				V.APP_IDNFR
			,	#ACCOUNT_ID#
			,	D.USERDEVCEIDNFR
			,	GETDATE()
			FROM 
				pms.mPMS_USER_DEVICE10 					D
			JOIN
				tap.MTAP_VERMNGR11 						V
				ON
					V.PACKAGE_NAME = #PACKAGE_NAME#
				AND V.REG_STATUS = '10'
			JOIN
				tap.MTAP_APPINFO10 						A
				ON	V.APP_IDNFR = A.APP_IDNFR
				AND A.REG_STATUS = '10'
			WHERE
				D.WIFI = #WIFI#
				AND D.REGISTUSDSTCD = '10'
		)
	]]>
	</select>
	
	<update id="updateConnectResponseLog" parameterClass="java.util.HashMap">
	<![CDATA[
		UPDATE tap.MTAP_CONNECTINFO10
		SET
			SERVER_RES_DATE = GETDATE()
		WHERE
			CONNECT_IDNFR = #CONNECT_ID#
	]]>
	</update>
	
	<select id="getOtherUserTotalCount" parameterClass="java.util.HashMap" resultClass="int">
	<![CDATA[
		SELECT
			COUNT(*) CNT
		FROM
			pmg.mPMG_LETS_SCHEDULE_OTHER_USER
		WHERE
			ACCOUNT_ID = #ACCOUNT_ID#
	]]>
	</select>
	
	<select id="getOtherUserList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT
			*
		FROM
		(
			SELECT
				ROW_NUMBER() OVER(ORDER BY ID ASC)					DISP_ORDER
			,	U.USERIDNFR 										Other_User_ID
			,	U.NAME 												Name
			,	IIF(U.GROUPCOCD = 'LGD', U.DEPTNAME, '')  			Department
			,	U.POSITION 											Level
			,	IIF(U.GROUPCOCD = 'LGD', 'LG Display', U.DEPTNAME)	Company
			,	U.EMAIL												Email
			FROM
				pmg.mPMG_LETS_SCHEDULE_OTHER_USER O 				WITH (NOLOCK)
			JOIN
				pms.mPMS_USER_INFO10 U								WITH (NOLOCK)
			ON	O.OTHER_ACCOUNT_ID = U.USERIDNFR
			WHERE
				ACCOUNT_ID = #ACCOUNT_ID#
		) T
		WHERE
			T.DISP_ORDER BETWEEN #BEGIN_NUM# AND #END_NUM#
	]]>
	</select>
	
	<select id="isOtherUserExist" parameterClass="java.util.HashMap" resultClass="int">
	<![CDATA[
		SELECT
			IIF(COUNT(*) > 0, 1, 0) CNT
		FROM
			pmg.mPMG_LETS_SCHEDULE_OTHER_USER					WITH (NOLOCK)
		WHERE
			ACCOUNT_ID = #ACCOUNT_ID#
		AND OTHER_ACCOUNT_ID = #OTHER_ACCOUNT_ID#
	]]>
	</select>
	
	<insert id="insertOtherUser" parameterClass="java.util.HashMap">
	<![CDATA[
		INSERT INTO
			pmg.mPMG_LETS_SCHEDULE_OTHER_USER
		(
			ACCOUNT_ID
		,	OTHER_ACCOUNT_ID
		)
		VALUES
		(
			#ACCOUNT_ID#
		,	#OTHER_ACCOUNT_ID#
		)
	]]>
	</insert>	

	<delete id="deleteOtherUser" parameterClass="java.util.HashMap"	>
	<![CDATA[
		DELETE FROM
			pmg.mPMG_LETS_SCHEDULE_OTHER_USER
		WHERE
			ACCOUNT_ID = #ACCOUNT_ID#
		AND OTHER_ACCOUNT_ID = #OTHER_ACCOUNT_ID#
	]]>
	</delete>
	
</sqlMap>